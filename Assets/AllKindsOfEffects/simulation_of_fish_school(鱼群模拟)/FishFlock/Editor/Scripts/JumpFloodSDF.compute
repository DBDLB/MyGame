#pragma kernel Init
#pragma kernel SDFStep
#pragma kernel GenerateFlow

float2 _Dimensions;
float2 _StepSize;

Texture2D<float4> _BaseMap;
SamplerState sampler_BaseMap;
Texture2D<float4> _Previous;
SamplerState sampler_Previous;
RWTexture2D<float4> _MainTex;


[numthreads(8,8,1)]
void Init (uint3 id : SV_DispatchThreadID)
{

    float2 uv = float2(id.x / _Dimensions.x, id.y / _Dimensions.y);
    float hasInfo = _Previous.SampleLevel(sampler_Previous, uv, 0).r;
    hasInfo = step(0.5, hasInfo);
    _MainTex[id.xy] = float4(id.x / _Dimensions.x, id.y / _Dimensions.y, 0.0, 0.0) * hasInfo;
}

float2 SampleTexAt(int x, int y){
    float2 uv = float2(x / _Dimensions.x, y / _Dimensions.y);
    float2 res = _Previous.SampleLevel(sampler_Previous, uv, 0).rg;
    return res;
}

float3 SampleTexWithOffset(int x, int y, int offsetX, int offsetY){
    x = x + offsetX;
    y = y + offsetY;
    if(x < 0 || y < 0 || x > _Dimensions.x || y > _Dimensions.y){
        return float3(0, 0, 0);
    }
    else{
        float2 res = SampleTexAt(x, y);
        if((res.x == 0.0f) && (res.y == 0.0f)){
            return float3(0, 0, 0); 
        }
        else{
            return float3(res, 1);
        }
    }
}

[numthreads(8,8,1)]
void SDFStep (uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(id.x / _Dimensions.x, id.y / _Dimensions.y);
    float2 existingData = SampleTexAt(id.x, id.y);
    float hasData = (length(existingData) != 0);
    float minDist = lerp(3.0f, distance(uv, existingData), hasData);

    float2 minUV = float2(0, 0);
    float foundMin = 0.0f;
    for(int i = -1; i <= 1; i++){
        for(int j = -1; j <= 1; j++){
            float3 result = SampleTexWithOffset(id.x, id.y, _StepSize.x * i, _StepSize.y * j);
            if(result.z > 0 && (i != 0 || j != 0)){
                float distanceFromCenter = distance(result.xy, uv);
                if(distanceFromCenter < minDist){
                    minDist = distanceFromCenter;
                    minUV = result.xy;
                    foundMin = 1.0f;
                } 
            }
        }
    }
    float2 outputUV = lerp(existingData, minUV, foundMin);
    _MainTex[id.xy] = float4(outputUV, 0.0, 0.0);
}

[numthreads(8,8,1)]
void GenerateFlow(uint3 id : SV_DispatchThreadID){
    float2 uv = float2(id.x / _Dimensions.x, id.y / _Dimensions.y);
    float2 existingData = SampleTexAt(id.x, id.y);
    float2 direction = normalize(existingData - uv);
    float4 baseMapData = _BaseMap.SampleLevel(sampler_BaseMap, uv, 0);
    float hasData = step(0.5, baseMapData.r);
    direction = lerp(direction, float2(0.0f, 0.0f), hasData);
    float3 inflDir = float3(direction.x, 0.0f, direction.y);
    inflDir = inflDir * 0.5f + 0.5f;
    _MainTex[id.xy] = float4(inflDir, 0.0);
    
}